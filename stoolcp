#!/usr/bin/env python

import os
import optparse
import getpass
import httplib
import simplejson

def Stool:
    '''Class to handle DB interactions
    '''

    def __init__(self,url,name):
        '''Constructor.
        '''
        self.url = url
        self.name = name
        user = raw_input('Username: ')
        pswd = getpass.getpass('Password: ')
        self.auth = base64.encodestring('%s:%s'%(user,pswd))

    def connect(self):
        '''Connect to the DB server'''
        conn = httplib.HTTPConnection(self.host)
        headers = {}
        headers['Authorization']='Basic %s' self.auth
        headers['Content-type']='application/json'
        return conn,headers

    def createDB(self):
        '''Create a database on server with name and design docs in the path
        '''
        conn,headers = self.connect()
        url = '/%s/' % self.name
        conn.request('PUT',url,'',headers)
        resp = conn.getresponse()
        print resp
            
    def deleteDB(self):
        '''Delete the database
        '''
        ans = raw_input('Delete DB %s from %s! Are you sure (y/N)' %(name,host))
        if ans != 'Y' and ans != 'y':
            return
        conn,headers = self.connect()
        url = '/%s/' % self.name
        conn.request('DELETE',url,'',headers)
        resp = conn.getresponse()
        print resp

    def saveDesign(self,doc):
        '''Save a document'''
        conn,headers = self.connect
        url = '/%s/_design/%s'
        conn.request('PUT',url,json.dumps(doc),headers)
        resp = conn.getresponse()
        print resp

    def updateDesign(db,path,removeOld=False):
        '''Update all the design documents in a database.
        If removeOld is True, then any fields (views etc.) not in the path
        but stored in the doc on the DB are removed from the DB DDoc.
        '''
        for dirName in os.walk(path).next()[1]:
            if dirName=='auth':
                fName = os.path.join(os.path.join(path,dirName),'validate_doc_update.js')
                if os.path.exists(fName):
                    doc = {'_id':'_design/%s'%dirName,
                           'language':'javascript'}
                    valStr = ''
                    fin = file(fName)
                    for line in fin.readlines():
                        valStr += line.strip()
                    doc['validate_doc_update']=valStr
                    self.saveDesign(doc)
            else:
                attachList = []
                doc = {'_id':'_design/%s'%dirName,
                       'language':'javascript'}
                if doc['_id'] in db:
                    doc = db[doc['_id']]
                    if removeOld==True:
                        docCopy = doc
                        doc = {}
                        doc = {'_id':docCopy['_id'],
                               '_rev':docCopy['_rev'],
                               'language':'javascript'}
                docPath = os.path.join(path,dirName)
                for subDirName in os.walk(docPath).next()[1]:
                    baseDir = os.path.join(docPath,subDirName)
                    if subDirName=='views':
                        if not doc.has_key('views'):
                            doc['views']={}
                        for viewName in os.walk(baseDir).next()[1]:
                            viewDir = os.path.join(baseDir,viewName)
                            mapStr = ''
                            redStr = ''
                            if os.path.exists(os.path.join(viewDir,'map.js')):
                                fin = file(os.path.join(viewDir,'map.js'))
                                for line in fin.readlines():
                                    mapStr += line.strip()
                            if os.path.exists(os.path.join(viewDir,'reduce.js')):
                                redStr = ''
                                fin = file(os.path.join(viewDir,'reduce.js'))
                                for line in fin.readlines():
                                    redStr += line.strip()
                            if mapStr!='':
                                doc['views'][viewName]={}
                                doc['views'][viewName]['map']=mapStr
                                if redStr!='':
                                    doc['views'][viewName]['reduce']=redStr
                    if subDirName=='attachments':
                        for root,dirs,files in os.walk(baseDir):
                            for f in files:
                                fPath = os.path.join(root,f)
                                fName = fPath[len(baseDir)+1:]
                                attachList.append([fPath,fName])                        
                    self.saveDesign(doc)

if __name__ == '__main__':
    parser = optparse.OptionParser( usage = "./stool <options>")
    parser.add_option('-n',dest='name',help='Database name')
    parser.add_option('-s',dest='host',help='Database host server')
    parser.add_option('-d',dest='design',help='Path to design docs')
    parser.add_option('--delete',dest='delete',action='store_true',help='Delete specified database',default=False)
    parser.add_option('--update',dest='update',action='store_true',help='Update specified database',default=False)
    parser.add_option('--prune' ,dest='prune' ,action='store_true',help='Prune specified database',default=False)
    (options,args) = parser.parse_args()
    mode = 'create'
    if options.delete is True:
        mode = 'delete'
    if options.update is True:
        mode = 'update'
    if options.prune is True:
        mode = 'prune'
    if not options.host or not options.name:
        parser.print_help()
    else:
        if mode == 'create':
            createDB(options.host,options.name,options.design)
        elif mode == 'delete':
            deleteDB(options.host,options.name)
        elif mode == 'update':
            if not options.design:
                print 'design docs required'
                parser.print_help()
            else:
                updateDB(options.host,options.name,options.design,False)
        elif mode == 'prune':
            if not options.design:
                print 'design docs required'
                parser.print_help()
            else:
                updateDB(options.host,options.name,options.design,True)
            
    
        
