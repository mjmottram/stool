#!/usr/bin/env python

import os
import sys
import optparse
import couchdb
import getpass

def loginDB(host,name):
    '''Just login to get the database.
    Assume we ALWAYS need login credentials.
    '''
    db = None
    couch = couchdb.Server(host)
    couch.resource.credentials = (raw_input('Username: '), getpass.getpass('Password: '))
    if name in couch:
        db = couch[name]
    return couch,db        

def createDB(host,name,path=None):
    '''Create a database on server with name and design docs in the path
    '''
    couch,db = loginDB(host,name)
    if db!=None:
        print 'db',name,'already exists'
        return
    else:
        db = couch.create(name)
    if path is not None:
        updateDesign(db,path)

def updateDB(host,name,path,removeOld):
    '''See updateDesign.  This just logs in first
    '''
    couch,db = loginDB(host,name)
    if db==None:
        print 'db:',name,'does not exist'
        return
    if path is not None:
        try:
            updateDesign(db,path,removeOld)
        except couchdb.http.Unauthorized:
            couch.resource.credentials = (raw_input('Username: '), getpass.getpass('Password: '))
            db = couch[name]
            updateDesign(db,path,removeOld)
            
def deleteDB(host,name):
    '''Delete the database
    '''
    ans = raw_input('Delete DB %s from %s! Are you sure (y/N)' %(name,host))
    if ans != 'Y' and ans != 'y':
        return
    couch,db = loginDB(host,name)
    if db==None:
        print 'db:',name,'does not exist'
        return
    else:
        couch.delete(name)

def updateDesign(db,path,removeOld=False):
    '''Update all the design documents in a database.
    If removeOld is True, then any fields (views etc.) not in the path
    but stored in the doc on the DB are removed from the DB DDoc.
    '''
    for dirName in os.walk(path).next()[1]:
        #each directory should be the name of a design document in the first instance
        if dirName=='auth':
            fName = os.path.join(os.path.join(path,dirName),'validate_doc_update.js')
            if os.path.exists(fName):
                doc = {'_id':'_design/%s'%dirName,
                       'language':'javascript'}
                valStr = ''
                fin = file(fName)
                for line in fin.readlines():
                    valStr += line.strip()
                doc['validate_doc_update']=valStr
                try:
                    db.save(doc)
                except:
                    #already have an auth doc, assume it's fine!
                    pass
        else:
            attachList = []
            doc = {'_id':'_design/%s'%dirName,
                   'language':'javascript'}
            if doc['_id'] in db:
                #empty first if we want to update the design
                doc = db[doc['_id']]
                if removeOld==True:
                    docCopy = doc
                    doc = {}
                    doc = {'_id':docCopy['_id'],
                           '_rev':docCopy['_rev'],
                           'language':'javascript'}
            docPath = os.path.join(path,dirName)
            for subDirName in os.walk(docPath).next()[1]:
                #add all other information
                #only want views, shows etc
                baseDir = os.path.join(docPath,subDirName)
                if subDirName=='views':
                    if not doc.has_key('views'):
                        doc['views']={}
                    for viewName in os.walk(baseDir).next()[1]:
                        viewDir = os.path.join(baseDir,viewName)
                        #should only use map.js and reduce.js here
                        mapStr = ''
                        redStr = ''
                        if os.path.exists(os.path.join(viewDir,'map.js')):
                            fin = file(os.path.join(viewDir,'map.js'))
                            for line in fin.readlines():
                                mapStr += line.strip()
                        if os.path.exists(os.path.join(viewDir,'reduce.js')):
                            redStr = ''
                            fin = file(os.path.join(viewDir,'reduce.js'))
                            for line in fin.readlines():
                                redStr += line.strip()
                        if mapStr!='':
                            doc['views'][viewName]={}
                            doc['views'][viewName]['map']=mapStr
                            if redStr!='':
                                doc['views'][viewName]['reduce']=redStr
                if subDirName=='attachments':
                    for root,dirs,files in os.walk(baseDir):
                        #maintain the original file structure
                        for f in files:
                            fPath = os.path.join(root,f)
                            fName = fPath[len(baseDir)+1:]
                            attachList.append([fPath,fName])  
            db.save(doc)
            for [fPath,fName] in attachList:
                db.put_attachment(doc,open(fPath,'r'),fName)

def attachDocs(host,name):
    couch,db = loginDB(host,name)
    if db==None:
        print 'db:',name,'does not exist'
        return
    else:
        #prompt user for attachment and design doc to post to
        postFile = True
        while postFile==True:
            dname = raw_input('Doc ID to post to: ')
            docid = '_design/%s'%dname
            if not docid in db:
                print 'cannot post: invalid design name'
            else:
                fpath = raw_input('Path to file: ')
                if not os.path.exists(fpath):
                    print 'cannot post: invalid file path'
                else:
                    fname = raw_input('File name (blank for same as file): ')
                    if fname=='' or fname==None:
                        fname = fpath.split('/')[-1]
                    doc = db[docid]
                    db.put_attachment(doc,open(fpath,'r'),fname)
            another = raw_input('Post another file (y/N): ')
            if another!='y' and another!='Y':
                postFile = False

if __name__ == '__main__':
    parser = optparse.OptionParser( usage = "./stool <options>")
    parser.add_option('-n',dest='name',help='Database name')
    parser.add_option('-s',dest='host',help='Database host server')
    parser.add_option('-d',dest='design',help='Path to design docs')
    parser.add_option('--delete',dest='delete',action='store_true',help='Delete specified database',default=False)
    parser.add_option('--update',dest='update',action='store_true',help='Update specified database',default=False)
    parser.add_option('--prune' ,dest='prune' ,action='store_true',help='Prune specified database',default=False)
    parser.add_option('--attach',dest='attach',action='store_true',help='Attach a single document',default=False)
    (options,args) = parser.parse_args()
    mode = 'create'
    if options.delete==True:
        if mode=='create':
            mode = 'delete'
        else:
            parser.print_help()
            raise Exception,'Only one -- option allowed'
    if options.update==True:
        if mode=='create':
            mode = 'update'
        else:
            parser.print_help()
            raise Exception,'Only one -- option allowed'
    if options.prune==True:
        if mode=='create':
            mode = 'prune'
        else:
            parser.print_help()
            raise Exception,'Only one -- option allowed'
    if options.attach==True:
        if mode=='create':
            mode = 'attach'
        else:
            parser.print_help()
            raise Exception,'Only one -- option allowed'        
    if not options.host or not options.name:
        parser.print_help()
    else:
        if mode == 'create':
            createDB(options.host,options.name,options.design)
        elif mode == 'delete':
            deleteDB(options.host,options.name)
        elif mode == 'update':
            if not options.design:
                print 'design docs required'
                parser.print_help()
            else:
                updateDB(options.host,options.name,options.design,False)
        elif mode == 'prune':
            if not options.design:
                print 'design docs required'
                parser.print_help()
            else:
                updateDB(options.host,options.name,options.design,True)
        elif mode == 'attach':
            attachDocs(options.host,options.name)
    
        
