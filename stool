#!/usr/bin/env python
#################################
#
# stool
#
# Simple script and functions for
# creating and updating couchdb
# design documents.
#
# Author:
#  Matt Mottram
#  <m.mottram@qmul.ac.uk>
#
#################################

import os
import sys
import copy
import optparse
import couchdb
import getpass


def login_database(host, name):
    '''Login to get the database.

    Assume we ALWAYS need login credentials.
    '''
    database = None
    couch = couchdb.Server(host)
    couch.resource.credentials = (raw_input('Username: '),
                                  getpass.getpass('Password: '))
    if name in couch:
        database = couch[name]
    return couch, database


def create_database(host, name, path=None):
    '''Create a database on server with name and design docs
    in the given path.
    '''
    couch, database = login_database(host, name)
    if database is not None:
        raise Exception('Database %s already exists' % name)
    database = couch.create(name)
    if path is not None:
        update_all_designs(database, path)


def update_database(host, name, path, remove_old, views=True, attachments=True):
    '''Gets database and then runs update_all_designs.
    '''
    couch, database = login_database(host, name)
    if database is None:
        raise Exception('database %s does not exist' % name)
    if path is not None:
        try:
            update_all_designs(database, path, remove_old, views, attachments)
        except couchdb.http.Unauthorized:
            couch.resource.credentials = (raw_input('Username: '),
                                          getpass.getpass('Password: '))
            database = couch[name]
            update_all_designs(database, path, remove_old, views, attachments)


def delete_database(host, name):
    '''Delete the database.

    Careful now!
    '''
    answer = raw_input('Delete DB %s from %s! Are you sure (y/N)' %
                       (name, host))
    if answer != 'Y' and answer != 'y':
        return
    couch, database = login_database(host, name)
    if database is None:
        raise Exception('database %s does not exist' % name)
    else:
        couch.delete(name)


def update_all_designs(database, path, remove_old=False, views=True, attachments=True):
    '''Update all the design documents in a database.

    If remove_old is True, then any fields (views etc.) not in the local
    database path but that are stored in the database document are removed
    from the document.
    '''
    for directory in os.walk(path).next()[1]:
        # Each top level directory should be the name of a design document

        if directory == 'auth':
            filename = os.path.join(os.path.join(path, directory),
                                    'validate_doc_update.js')
            if os.path.exists(filename):
                doc = {'_id': '_design/%s' % directory,
                       'language': 'javascript'}
                validate_text = ''
                fin = file(filename)
                for line in fin.readlines():
                    validate_text += line.strip()
                doc['validate_doc_update'] = validate_text
                try:
                    database.save(doc)
                except:
                    # Already have an auth doc, assume it's fine!
                    pass

        else:
            update_design(database, path, directory, remove_old, views, attachments)


def update_design(database, path, directory, remove_old, views=True, attachments=True):
    '''Update a specific design document.

    views / attachments set to False implies do not update that component
    '''
    attachment_list = []
    doc = {'_id': '_design/%s' % directory,
           'language': 'javascript'}
    if doc['_id'] in database:
        # Empty first if we want to update the design
        doc = database[doc['_id']]
        if remove_old is True:
            doc_copy = copy.copy(doc)
            doc = {}
            doc = {'_id': doc_copy['_id'],
                   '_rev': doc_copy['_rev'],
                   'language': 'javascript'}
    doc_path = os.path.join(path, directory)

    for sub_directory in os.walk(doc_path).next()[1]:
        # Add all other information
        # Only want views, shows etc
        base_directory = os.path.join(doc_path, sub_directory)

        if sub_directory == 'views':
            if not 'views' in doc:
                doc['views']={}
            for view_name in os.walk(base_directory).next()[1]:
                view_directory = os.path.join(base_directory, view_name)
                # Should only use map.js and reduce.js here
                map_text = parse_text(view_directory, 'map.js')
                reduce_text = parse_text(view_directory, 'reduce.js')
                if map_text is not None:
                    doc['views'][view_name]={}
                    doc['views'][view_name]['map']=map_text
                    if reduce_text is not None:
                        doc['views'][view_name]['reduce']=reduce_text

        if sub_directory == 'attachments':
            for root, dirs, files in os.walk(base_directory):
                # Maintain the original file structure
                for f in files:
                    file_path = os.path.join(root, f)
                    filename = file_path[len(base_directory)+1:]
                    attachment_list.append([file_path, filename])
    if views:
        print "update views for %s" % directory
        database.save(doc)
    if attachments:
        for [file_path, filename] in attachment_list:
            print "post attachment %s to %s" % (filename, directory)
            database.put_attachment(doc, open(file_path, 'r'), filename)


def parse_text(directory, filename):
    filepath = os.path.join(directory, filename)
    if not os.path.exists(filepath):
        return None
    text = ''
    for line in open(filepath).readlines():
        text += line.strip()
    return text


def attach_documents(host, name):
    '''Attache a specific document.

    Can only attach to design documents.
    '''
    couch, database = login_database(host, name)
    if database is None:
        raise Exception('database %s does not exist' % name)
    else:
        # Prompt user for attachment and design doc to post to
        post_file = True
        while post_file is True:
            design_name = raw_input('Design document to post to: ')
            design_id = '_design/%s' % design_name
            if not design_id in database:
                # Don't exit at these points, just don't post and reprompt user
                print 'cannot post: invalid design name'
            else:
                file_path = raw_input('Path to file: ')
                if not os.path.exists(file_path):
                    print 'cannot post: invalid file path'
                else:
                    filename = raw_input('Filename (blank for same as file): ')
                    if filename == '' or filename is None:
                        filename = file_path.split('/')[-1]
                    doc = database[design_id]
                    database.put_attachment(doc, open(file_path, 'r'),
                                            filename)
            another = raw_input('Post another file (y/N): ')
            if another != 'y' and another != 'Y':
                post_file = False


def attach_all_documents(host, name):
    couch, database = login_database(host, name)
    if database is None:
        raise Exception('database %s does not exist' % name)
    directory = raw_input('Path to design folder: ')
    if not os.path.exists(directory):
        raise Exception('Path %s does not exist' % directory)
    design_name = os.path.basename(directory)
    ok = raw_input('Post attachments for %s (y/N)? ' % design_name)
    if ok == 'Y' or ok == 'y':
        print "updating %s" % directory
        update_design(database, os.path.dirname(directory), design_name, False, views=False, attachments=True)
    else:
        print "quitting"


def update_single_design(host, name):
    couch, database = login_database(host, name)
    if database is None:
        raise Exception('database %s does not exist' % name)
    directory = raw_input('Path to design folder: ')
    if not os.path.exists(directory):
        raise Exception('Path %s does not exist' % directory)
    design_name = os.path.basename(directory)
    ok = raw_input('Update full design doc for %s (y/N)? ' % design_name)
    if ok == 'Y' or ok == 'y':
        print "updating %s" % directory
        update_design(database, os.path.dirname(directory), design_name, False, views=True, attachments=True)
    else:
        print "quitting"
        

        
def update_view(host, name):
    '''Update a specific view.

    Will do both map and reduce (if present).
    '''
    couch, database = login_database(host, name)
    if database is None:
        raise Exception('database %s does not exist' % name)
    post_view = True
    while post_view is True:
        path_name = raw_input('Path to design view: ')
        while path_name[-1]=='/':
            # ensure no / at the end
            path_name = path_name[:-1]
        print path_name
        view_name = os.path.basename(path_name)
        design_name = os.path.basename(path_name[:-(len(os.path.join("/views", view_name)))])
        print view_name
        print design_name
        design_id = "_design/%s" % design_name
        if design_id not in database:
            # Don't exit at these points, just don't post and reprompt user
            print 'cannot post: invalid design name %s' % design_id
        else:    
            doc = database[design_id]
            post = "N"
            if view_name in doc['views']:
                post = raw_input("Update %s?[y/N]: " % view_name)
            else:
                post = raw_input("Post new view %s?[y/N]: " % view_name)
            if post=="Y" or post=="y":
                print "Updating view"
                map_text = parse_text(path_name, 'map.js')
                reduce_text = parse_text(path_name, 'reduce.js')
                if map_text is not None:
                    doc['views'][view_name]={}
                    doc['views'][view_name]['map']=map_text
                    if reduce_text is not None:
                        doc['views'][view_name]['reduce']=reduce_text
            database.save(doc)
        another = raw_input('Post another view (y/N): ')
        print another
        if another != 'y' and another != 'Y':
            post_view = False


if __name__ == '__main__':
    parser = optparse.OptionParser(usage = "./stool <options>")
    parser.add_option('-n', dest='name', help='Database name')
    parser.add_option('-s', dest='host', help='Database host server')
    parser.add_option('-d', dest='design', help='Path to design docs')
    parser.add_option('-v', dest='view', action='store_true',
                      help='Only update views (not attachments)',
                      default=False)
    parser.add_option('--delete', dest='delete', action='store_true',
                      help='Delete specified database', default=False)
    parser.add_option('--update', dest='update', action='store_true',
                      help='Update specified database', default=False)
    parser.add_option('--prune', dest='prune', action='store_true',
                      help='Prune specified database', default=False)
    parser.add_option('--attach', dest='attach', action='store_true',
                      help='Attach a single document', default=False)
    parser.add_option('--attachall', dest='attachall', action='store_true',
                      help='Update all attachments for a doc', default=False)
    parser.add_option('--view', dest='view', action='store_true',
                      help='Update/add a single view', default=False)
    parser.add_option('--design', dest='design', action='store_true',
                      help='Update/add a single design', default=False)
    (options, args) = parser.parse_args()
    mode = 'create'

    if options.delete is True:
        if mode == 'create':
            mode = 'delete'
        else:
            parser.print_help()
            raise Exception('Only one -- option allowed')

    if options.update is True:
        if mode == 'create':
            mode = 'update'
        else:
            parser.print_help()
            raise Exception('Only one -- option allowed')

    if options.prune is True:
        if mode == 'create':
            mode = 'prune'
        else:
            parser.print_help()
            raise Exception('Only one -- option allowed')

    if options.attach is True:
        if mode == 'create':
            mode = 'attach'
        else:
            parser.print_help()
            raise Exception('Only one -- option allowed')

    if options.attachall is True:
        if mode == 'create':
            mode = 'attachall'
        else:
            parser.print_help()
            raise Exception('Only one -- option allowed')

    if options.view is True:
        if mode == 'create':
            mode = 'view'
        else:
            parser.print_help()
            raise Exception('Only one -- option allowed')

    if options.design is True:
        if mode == 'create':
            mode = 'design'
        else:
            parser.print_help()
            raise Exception('Only one -- option allowed')

    if not options.host or not options.name:
        parser.print_help()
    else:
        if mode == 'create':
            create_database(options.host, options.name, options.design)
        elif mode == 'delete':
            delete_database(options.host, options.name)
        elif mode == 'update':
            if not options.design:
                print 'design docs required'
                parser.print_help()
            else:
                update_database(options.host, options.name,
                                options.design, False, True)
        elif mode == 'prune':
            if not options.design:
                print 'design docs required'
                parser.print_help()
            else:
                update_database(options.host, options.name,
                                options.design, True)
        elif mode == 'attach':
            attach_documents(options.host, options.name)
        elif mode == 'attachall':
            attach_all_documents(options.host, options.name)
        elif mode == 'view':
            update_view(options.host, options.name)
        elif mode == 'design':
            update_single_design(options.host, options.name)
